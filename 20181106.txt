树
基本的概念就略了 不熟的记一下
结点拥有的子树树为节点的度（degree）
根为第一层 最大层次成为树的深度（depth）或 高度

树的存储结构
找父亲法
就是带指父亲在哪的指示器
data+parent（指针域）
还可以加 长子域 右兄弟域
像找父亲这个方法
找父亲就很简单 O（1） 但找孩子就难得一比
存储结构是非常灵活的 应该根据要用的方法是否方便来设计
找孩子法
孩子兄弟法
各有利弊 略过

二叉树
同样基本概念略 不熟的记
特殊二叉树
斜树 就是只有左子树 或者 只有右子树
满二叉树 就是都有 完美

完美二叉树 有点特殊 跟满二叉树有区别
对二叉树编号 二叉树中结点的位置跟满二叉树完全相同 则为完美二叉树
完美二叉树的编号不能空档 到12的树不能缺10 可以没有12

二叉树的性质
1.第i层上最多有2的i-1次方个结点 （i >= 1）

2.深度为k的二叉树 最多有 2的k次方 - 1 个结点 （k >= 1）
注意这个k跟上面的i 次方不一样

3.任何一个二叉树 叶子数为n0 度为2的结点数为n2
n0 = n2 + 1

还有几个性质 一共五个 记事本打公式不方便 先放放

二叉树的存储结构
一维数组
一般的树用顺序储存比较困难 但二叉树可以
就是按二叉树编号来的
但由于斜树一般k个结点却要用2的k次方-1个储存单元空间 所以顺序储存一般只用于完全二叉树
二叉链表
一个数据域两个指针域（左和右）
没啥好说的 就挺直观

二叉树遍历
前序遍历
先根节点然后前序遍历左子树 然后 前序遍历右子树
总的来说就是 从 根开始 能左就左 不能就右 O了

中序遍历
先中序遍历左子树 然后访问根节点 然后中序遍历右子树

后序遍历
先从左到右先叶子后结点的方式遍历访问左右子树 最后根节点

前中还好 后序有些困难 但都有递归的思想在里面

后序这个先从左边的叶子开始访问右子树再结点 然后再找右子树的叶子 继续这个过程

噢噢噢噢噢噢 突然顿悟
其实就是当成个三角形
前序就是根-左-右
中序就是左-根-右
后序就是左-右-根
然后记得要用递归就好

还有个层序遍历 很粗暴 每一层都是从左到右


