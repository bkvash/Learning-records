平衡二叉树
二分查找树的升级版 似乎保证了结点的平衡
2-3查找树 看起来就是个奇葩
2结点就是普通的
3结点有两个键和对应的值 还有三条链接
左链指的键都小于该结点的两个键
右链就大
中链指的键介于该结点的两个键之间

向2结点中插入新键
先进行一次未命中的查找
把新结点挂在下面的话就不完美平衡了
所以可以跟刚刚那个2结点组成个3结点
三结点的插入就要复杂些 还要分情况

一棵只有3结点的树
插新键 一个3结点加个2结点
变成3个2结点
其实就是把3结点分了

给一个父结点为2结点的3结点插新键
把3结点的右边那个键丢到父结点上
跟父结点组成3结点
然后剩下的左键和新键分成两个2结点
父结点还是刚刚组成的那个3结点

给一个父节点为3结点的3结点插新键
之前有个细节我没管
其实3结点插新键有个辅助过程
就是形成个临时4结点
3个键 4个链接
然后应该把4结点的中键丢上去
所以不是丢右键 而应该丢中键
然后这个父结点为3结点的3结点
还是同样要组成临时4结点然后往父结点丢中键
但是父结点也是3结点啊
所以父结点要递归同样的过程
直到父结点是个2结点才OK
那么问题来了 如果一直到根结点都是3结点怎么办
新的情况就是要分解根结点
分解根结点很简单
根结点变成了临时的4结点然后分解成3个2结点
样子就是一棵简单的树
整个树的高会+1
但重要的是仍然保持了树的完美平衡性
这些操作都是为了保持完美平衡性
所以这些操作都不会往叶延伸
唯一会拓展的就是根分解
所以结点越加越多其实是根结点越来越往上走

红黑树
久仰大名 听着就挺吓人
用一些额外的信息来替换3结点的标准二叉查找树
树中的链接分成两种类型
黑链接就是普通链接
红链接是将两个2结点链接起来构成3结点
示意
3结点
ab
小于a 介于ab 大于b

红黑树
b
a(用红链接连接) 大于b（b的右链）
小于a 介于ab  （这两个分别是a的左链和右链）

所以
红链接都是左链接
没有一个结点同时有两条红链接
该树是完美黑色平衡 任意空链到根结点的路径上的黑链数量相同
把红链画平就很清晰了 跟2-3树一模一样
虽然概念很简单
但操作好尼玛复杂

旋转
这应该是个修复操作
假设有一条红色右链需要被转化为左链
这个操作叫左旋转
对应的方法接受一条指向某个结点的链接作为参数
假设这个被指向的结点的右链接是红色的
这个方法会进行调整并返回一个指向包含同一组键的子树
并且左链为红色的根结点的链接
旋转都有点看不懂 先放跳过 后面再细看
