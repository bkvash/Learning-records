2018/7/24 2:00
刚明白C#里的委托是个啥意思
delegate void MyDel(int value);
应该是放方法的类 没有实现代码块
输出类型和输入参数的个数和类型定义了一个委托指定的方法
（刚看了眼书 输入参数的个数和类型 叫 签名 之前有印象）
委托可以看做一组方法的有序组合
调用委托就等于一个一个执行这组方法
添加用+= 删除用-=
当然委托是引用类型 对委托本身做改变不会影响包含的方法

如果委托有返回值并且有多个方法
那最后一个方法的返回值就是委托调用的返回值
emmmm..............
其他方法的调用值都会被忽略 这....
略不合逻辑 我以为会返回个数组之类的

如果委托有引用参数（ref）
ref的新值会传到下一个方法......行吧

匿名方法
只会被使用一次 用来初始化委托？避免了创建独立的具体名称的方法
大概理解了 还不知道有什么用
就是创建了就直接后面加{}开始写方法的内容 也没名字
匿名方法不会显式的声明返回值（就是没名称 也没名称前面 void/int 什么的）
但还是要匹配委托的返回类型 委托void就不能有返回值 委托int就必须要返回int
其他定义方法的东西 参数数量 参数类型和位置 修饰符 都要跟委托匹配
匿名方法能用空（）简化参数列表的条件 两个
1.委托里没带out的参数 2.匿名方法不用参数
书里提到了params参数 不太知道是啥
main方法有用这个来着 好像不太重要 讲的也是省略params关键字的事情 先略过了
匿名方法的内部变量在外面不能用 这个当然吧

lambda
期待已久的东西 似乎也不容易懂
目前没开始学习仅凭之前看过的代码来试着解释下lambda是来干嘛的吧
刚学了匿名方法 应该跟lambda类似 在声明时直接后面就开始写了比起之前的语法难看懂一些
但懂了之后应该是很简化语法的表达方式
之前看了好多次 一行代码各种运算符 把一般要十行左右的代码干的事给做了
应该会很高效 不过苦了没学过的人
 => 就用这个 根据之前委托写的各种类型 编译器能推断 所以可以写这么简洁
参数必须跟委托匹配 这是当然的 简洁不是乱写
表达式参数不一定需要包含类型 除非有ref和out（这时必须写）
如果只有一个参数 而且可以省去类型 那连括号都能省
如果没参数 必须写（）呵 有点意思
这就没了 感觉之前看的代码还要复杂点
找找代码 回看一下


