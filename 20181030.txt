又换书了 大话数据结构 这本书
看着就挺白话的 入门够了
走着

int string 这些算是数据类型 跟之前的基础部分联系起来
抽象数据类型ADT 是一套数学模型 定义仅取决于它的逻辑特性 跟其在计算机内部如何表示和实现无关
emmm.....所以数据结构是计算机学习中的基础 有点感觉了
不过这书过于简单直白了 感觉想是科普读物 干货也有 不过
第二章算法跳过 讲的是算法的比较 牛逼的算法是什么样的 时间复杂度空间复杂度 大O记号之类的

第三章链表
开头的比喻挺有意思 幼儿园小朋友排队 每个小朋友记住前面是谁后面是谁就行了 形成习惯后 谁没有到位直接能报告出来
还是双链表
链表的描述和一些特性就跳过了

数组长度 与 线性表长度 的区别
我还以为线性表的单元是数组 好像不是
数组的长度是存放线性表的存储空间的长度
这话....
线性表占用的存储空间的长度吗？ 线性表不一定会用满
任何情况下线性表的长度小于等于数组的长度
这理解应该没问题

线性表的起始是1 数组的起始当然是0...
......为啥呀 为啥不统一啊
我以为计算机的世界里起始都是0
地址计算方法 感觉不太对
之前我记得学的是链表的元素是散列得储存在内存里 链表的这个单元里包含了指向下一个单元的地址和这个单元包含的数据
一个个的地址是一路指下去的 散列的
这里写的是线性一路排下去的
这里好像单指了顺序储存结构 线性表和链表可能还有差异
不合理的地方马上来了 插入和删除都涉及操作位置之后的所有元素要挪屁股
存取一时爽 插删火葬场
那我的理解没有问题 这里讲的是一字往后排的顺序结构

链式存储结构
链式就是爬的时候就是O(n) 插删方便

静态链表 跳过了 是没有指针类型的语言里用数组建立链表
算了还是不跳过了 感觉还好理解
数组的每一个下标都对应一个data 和 一个cur
data存放数据元素 ok
游标cur相当于单链表中的next指针 存放该元素的后继在数组中的下标
插入删除等操作都还挺好理解的
